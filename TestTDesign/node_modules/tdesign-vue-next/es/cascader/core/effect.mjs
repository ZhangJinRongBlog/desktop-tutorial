/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-89b33ff6.mjs';
import { i as isNumber_1 } from '../../_chunks/dep-a432d90f.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-97c71289.mjs';
import { i as isArray_1 } from '../../_chunks/dep-0d1bd08c.mjs';
import { c as cloneDeep_1 } from '../../_chunks/dep-493c38ce.mjs';
import { getFullPathLabel, getTreeValue } from './helper.mjs';
import '../../_chunks/dep-6bcce672.mjs';
import '../../_chunks/dep-6f3e4f56.mjs';
import '../../_chunks/dep-b1060562.mjs';
import '../../_chunks/dep-b333ab93.mjs';
import '../../_chunks/dep-8049d2e0.mjs';
import '../../_chunks/dep-4efc69ee.mjs';
import '../../_chunks/dep-b56b2dc0.mjs';
import '../../_chunks/dep-77f634fb.mjs';
import '../../_chunks/dep-28ae3cda.mjs';
import '../../_chunks/dep-e50fa7b0.mjs';
import '../../_chunks/dep-ae08d6c4.mjs';
import '../../_chunks/dep-7211604f.mjs';
import '../../_chunks/dep-75df64b1.mjs';
import '../../_chunks/dep-48b9a098.mjs';
import '../../_chunks/dep-c7e4942d.mjs';
import '../../_chunks/dep-c5d88cfe.mjs';
import '../../_chunks/dep-25d66c95.mjs';
import '../../_chunks/dep-372265bb.mjs';
import '../../_chunks/dep-d940e2da.mjs';
import '../../_chunks/dep-52c1d6a9.mjs';
import '../../_chunks/dep-18bb982b.mjs';
import '../../_chunks/dep-c57d8117.mjs';
import '../../_chunks/dep-6043e9fc.mjs';
import '../../_chunks/dep-ec227f3f.mjs';

function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
  var checkStrictly = cascaderContext.checkStrictly,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    setVisible = cascaderContext.setVisible,
    setValue = cascaderContext.setValue,
    setTreeNodes = cascaderContext.setTreeNodes,
    setExpend = cascaderContext.setExpend,
    value = cascaderContext.value,
    max = cascaderContext.max,
    valueType = cascaderContext.valueType;
  var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
  if (isDisabled) return;
  if (propsTrigger === trigger && !node.isLeaf()) {
    var expanded = node.setExpanded(true);
    treeStore.refreshNodes();
    treeStore.replaceExpanded(expanded);
    var nodes = treeStore.getNodes().filter(function (node2) {
      return node2.visible;
    });
    setTreeNodes(nodes);
    if (multiple) {
      setExpend(expanded);
    }
  }
  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
    treeStore.resetChecked();
    var checked = node.setChecked(!node.checked);
    var _checked = _slicedToArray(checked, 1),
      value2 = _checked[0];
    setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
      return item.value;
    }), "check", node.getModel());
    if (!checkStrictly) {
      setVisible(false, {});
    }
  }
}
function valueChangeEffect(node, cascaderContext) {
  var disabled = cascaderContext.disabled,
    max = cascaderContext.max,
    inputVal = cascaderContext.inputVal,
    multiple = cascaderContext.multiple,
    setVisible = cascaderContext.setVisible,
    setValue = cascaderContext.setValue,
    treeNodes = cascaderContext.treeNodes,
    treeStore = cascaderContext.treeStore,
    valueType = cascaderContext.valueType;
  if (!node || disabled || node.disabled) {
    return;
  }
  var checked = node.setChecked(!node.isChecked());
  if (isNumber_1(max) && max < 0) {
    console.warn("TDesign Warn:", "max should > 0");
  }
  if (checked.length > max && isNumber_1(max) && max > 0) {
    return;
  }
  if (checked.length === 0) {
    var expanded = treeStore.getExpanded();
    setTimeout(function () {
      treeStore.replaceExpanded(expanded);
      treeStore.refreshNodes();
    }, 0);
  }
  if (!multiple) {
    setVisible(false, {});
  }
  var isSelectAll = treeNodes.every(function (item) {
    return checked.indexOf(item.value) > -1;
  });
  if (inputVal && isSelectAll) {
    setVisible(false, {});
  }
  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, node.checked ? "uncheck" : "check", node.getModel());
}
function closeIconClickEffect(cascaderContext) {
  var setVisible = cascaderContext.setVisible,
    multiple = cascaderContext.multiple,
    setValue = cascaderContext.setValue;
  setVisible(false, {});
  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext, index, onRemove) {
  var disabled = cascaderContext.disabled,
    setValue = cascaderContext.setValue,
    value = cascaderContext.value,
    valueType = cascaderContext.valueType,
    treeStore = cascaderContext.treeStore;
  if (disabled) return;
  var newValue = cloneDeep_1(value);
  var res = newValue.splice(index, 1);
  var node = treeStore.getNodes(res[0])[0];
  setValue(newValue, "uncheck", node.getModel());
  var checked = node.setChecked(!node.isChecked());
  var resValue = valueType === "single" ? checked : checked.map(function (val) {
    return treeStore.getNode(val).getPath().map(function (item) {
      return item.value;
    });
  });
  setValue(resValue, "uncheck", node.getModel());
  if (isFunction_1(onRemove)) {
    onRemove({
      value: checked,
      node: node
    });
  }
}
var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
  if (!treeStore) return;
  var nodes = [];
  if (inputVal) {
    var filterMethods = function filterMethods(node) {
      if (!node.isLeaf()) return;
      if (isFunction_1(filter)) {
        return filter("".concat(inputVal), node);
      }
      var fullPathLabel = getFullPathLabel(node, "");
      return fullPathLabel.indexOf("".concat(inputVal)) > -1;
    };
    nodes = treeStore.nodes.filter(filterMethods);
  } else {
    nodes = treeStore.getNodes().filter(function (node) {
      return node.visible;
    });
  }
  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
  var treeValue = getTreeValue(value);
  if (!treeStore) return;
  if (isArray_1(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */new Map();
    var _treeValue = _slicedToArray(treeValue, 1),
      val = _treeValue[0];
    if (val) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);
      if (!node) {
        treeStore.refreshNodes();
        return;
      }
      node.getParents().forEach(function (tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    }
  }
  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }
  treeStore.refreshNodes();
};

export { closeIconClickEffect, expendClickEffect, handleRemoveTagEffect, treeNodesEffect, treeStoreExpendEffect, valueChangeEffect };
//# sourceMappingURL=effect.mjs.map
