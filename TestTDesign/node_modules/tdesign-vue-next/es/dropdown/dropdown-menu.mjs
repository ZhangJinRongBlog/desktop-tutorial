/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-a26b9c60.mjs';
import { defineComponent, reactive, ref, onMounted, h, createVNode } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import _DropdownItem from './dropdown-item.mjs';
import props from './props.mjs';
import { Divider } from '../divider/index.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { i as isFunction_1 } from '../_chunks/dep-97c71289.mjs';
import '../_chunks/dep-b333ab93.mjs';
import './dropdown-item-props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-3a045465.mjs';
import '../_chunks/dep-6f3e4f56.mjs';
import '../_chunks/dep-77f634fb.mjs';
import '../_chunks/dep-28ae3cda.mjs';
import '../_chunks/dep-e50fa7b0.mjs';
import '../_chunks/dep-ae08d6c4.mjs';
import '../_chunks/dep-b1060562.mjs';
import '../_chunks/dep-4efc69ee.mjs';
import '../_chunks/dep-7211604f.mjs';
import '../_chunks/dep-75df64b1.mjs';
import '../_chunks/dep-48b9a098.mjs';
import '../_chunks/dep-c7e4942d.mjs';
import '../_chunks/dep-8049d2e0.mjs';
import '../_chunks/dep-0d1bd08c.mjs';
import '../_chunks/dep-c5d88cfe.mjs';
import '../_chunks/dep-25d66c95.mjs';
import '../_chunks/dep-372265bb.mjs';
import '../_chunks/dep-d940e2da.mjs';
import '../_chunks/dep-52c1d6a9.mjs';
import '../_chunks/dep-53dc0ac1.mjs';
import '../_chunks/dep-b6b4eaa3.mjs';
import '../_chunks/dep-881cffb7.mjs';
import '../_chunks/dep-436b338d.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-2d31a683.mjs';
import '../_chunks/dep-3ddc95d0.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-493c38ce.mjs';
import '../_chunks/dep-b56b2dc0.mjs';
import '../_chunks/dep-18bb982b.mjs';
import '../_chunks/dep-c57d8117.mjs';
import '../_chunks/dep-6043e9fc.mjs';
import '../_chunks/dep-5f6c8826.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-0a6fd248.mjs';
import '../_chunks/dep-7ad89920.mjs';
import '../_chunks/dep-36563716.mjs';
import '../_chunks/dep-b1013215.mjs';
import '../_chunks/dep-91fc304f.mjs';
import '../_chunks/dep-17446155.mjs';
import '../_chunks/dep-8747fcf0.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-ec227f3f.mjs';
import '../utils/helper.mjs';
import '../_chunks/dep-9c7a32ff.mjs';
import '../_chunks/dep-89b33ff6.mjs';
import '../_chunks/dep-6bcce672.mjs';
import '../_chunks/dep-ce88e3c0.mjs';
import '../_chunks/dep-c45cdd10.mjs';
import '../_chunks/dep-a432d90f.mjs';
import '../divider/divider.mjs';
import '../divider/props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../divider/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _DropdownMenu = defineComponent({
  name: "TDropdownMenu",
  props: _objectSpread({}, props),
  setup: function setup(props) {
    var dropdownClass = usePrefixClass("dropdown");
    var dropdownMenuClass = usePrefixClass("dropdown__menu");
    var scrollTopMap = reactive({});
    var menuRef = ref();
    var isOverMaxHeight = ref(false);
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRightIcon
      }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;
    var handleItemClick = function handleItemClick(options) {
      var _data$onClick, _props$onClick;
      var data = options.data,
        context = options.context;
      data === null || data === void 0 || (_data$onClick = data.onClick) === null || _data$onClick === void 0 || _data$onClick.call(data, data, context);
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, data, context);
    };
    var handleScroll = function handleScroll(e, deep) {
      var scrollTop = e.target.scrollTop;
      scrollTopMap[deep] = scrollTop;
    };
    onMounted(function () {
      if (menuRef.value) {
        var _window;
        var menuHeight = parseInt((_window = window) === null || _window === void 0 ? void 0 : _window.getComputedStyle(menuRef.value).height, 10);
        if (menuHeight >= props.maxHeight) isOverMaxHeight.value = true;
      }
    });
    var getContent = function getContent(content) {
      if (isFunction_1(content)) {
        return content(h);
      }
      return content;
    };
    var renderOptions = function renderOptions(data, deep) {
      var _data$forEach;
      var arr = [];
      var renderContent;
      (_data$forEach = data.forEach) === null || _data$forEach === void 0 || _data$forEach.call(data, function (menu, idx) {
        var optionItem = _objectSpread({}, menu);
        var onViewIdx = idx - Math.ceil(scrollTopMap[deep] / 30);
        var renderIdx = onViewIdx >= 0 ? onViewIdx : idx;
        if (optionItem.children) {
          optionItem.children = renderOptions(optionItem.children, deep + 1);
          renderContent = createVNode("div", {
            "key": idx
          }, [createVNode(_DropdownItem, {
            "style": optionItem.style,
            "class": ["".concat(dropdownClass.value, "__item"), "".concat(dropdownClass.value, "__item--suffix"), optionItem["class"]],
            "value": optionItem.value,
            "theme": optionItem.theme,
            "active": optionItem.active,
            "prefixIcon": optionItem.prefixIcon,
            "disabled": optionItem.disabled,
            "minColumnWidth": props.minColumnWidth,
            "maxColumnWidth": props.maxColumnWidth,
            "isSubmenu": true
          }, {
            "default": function _default() {
              return [createVNode("div", {
                "class": "".concat(dropdownClass.value, "__item-content")
              }, [createVNode("span", {
                "class": "".concat(dropdownClass.value, "__item-text")
              }, [getContent(optionItem.content)]), createVNode(ChevronRightIcon$1, {
                "class": "".concat(dropdownClass.value, "__item-direction"),
                "size": "16"
              }, null)]), createVNode("div", {
                "class": ["".concat(dropdownClass.value, "__submenu-wrapper"), _defineProperty({}, "".concat(dropdownClass.value, "__submenu-wrapper--").concat(props.direction), props.direction)],
                "style": {
                  position: "absolute",
                  top: "".concat(renderIdx * 30, "px")
                }
              }, [createVNode("div", {
                "class": ["".concat(dropdownClass.value, "__submenu"), _defineProperty({}, "".concat(dropdownClass.value, "__submenu--disabled"), optionItem.disabled)],
                "style": {
                  position: "static",
                  maxHeight: "".concat(props.maxHeight, "px")
                },
                "onScroll": function onScroll(e) {
                  return handleScroll(e, deep + 1);
                }
              }, [createVNode("ul", null, [optionItem.children])])])];
            }
          }), optionItem.divider ? createVNode(Divider, null, null) : null]);
        } else {
          renderContent = createVNode("div", {
            "key": idx
          }, [createVNode(_DropdownItem, {
            "style": optionItem.style,
            "class": ["".concat(dropdownClass.value, "__item"), optionItem["class"]],
            "value": optionItem.value,
            "theme": optionItem.theme,
            "active": optionItem.active,
            "prefixIcon": optionItem.prefixIcon,
            "disabled": optionItem.disabled,
            "minColumnWidth": props.minColumnWidth,
            "maxColumnWidth": props.maxColumnWidth,
            "onClick": optionItem.disabled || optionItem.children ? function () {
              return null;
            } : function (value, context) {
              return handleItemClick({
                data: optionItem,
                context: context
              });
            }
          }, {
            "default": function _default() {
              return [createVNode("span", {
                "class": "".concat(dropdownClass.value, "__item-text")
              }, [getContent(optionItem.content)])];
            }
          }), optionItem.divider ? createVNode(Divider, null, null) : null]);
        }
        arr.push(renderContent);
      });
      return arr;
    };
    return function () {
      return createVNode("div", {
        "class": [dropdownMenuClass.value, "".concat(dropdownMenuClass.value, "--").concat(props.direction), _defineProperty({}, "".concat(dropdownMenuClass.value, "--overflow"), isOverMaxHeight.value)],
        "style": {
          maxHeight: "".concat(props.maxHeight, "px")
        },
        "ref": menuRef,
        "onScroll": function onScroll(e) {
          return handleScroll(e, 0);
        }
      }, [renderOptions(props.options, 0)]);
    };
  }
});

export { _DropdownMenu as default };
//# sourceMappingURL=dropdown-menu.mjs.map
