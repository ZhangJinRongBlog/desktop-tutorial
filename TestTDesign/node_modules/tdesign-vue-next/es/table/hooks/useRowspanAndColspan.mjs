/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { ref, watch } from 'vue';
import { g as get_1 } from '../../_chunks/dep-87c358ba.mjs';
import '../../_common/js/log/index.mjs';
import log from '../../_common/js/log/log.mjs';
import '../../_chunks/dep-6f3e4f56.mjs';
import '../../_chunks/dep-6e04bcaa.mjs';
import '../../_chunks/dep-0d1bd08c.mjs';
import '../../_chunks/dep-c5d88cfe.mjs';
import '../../_chunks/dep-b333ab93.mjs';
import '../../_chunks/dep-36563716.mjs';
import '../../_chunks/dep-b1060562.mjs';
import '../../_chunks/dep-8049d2e0.mjs';
import '../../_chunks/dep-28ae3cda.mjs';
import '../../_chunks/dep-e50fa7b0.mjs';
import '../../_chunks/dep-97c71289.mjs';
import '../../_chunks/dep-4efc69ee.mjs';
import '../../_chunks/dep-ae08d6c4.mjs';
import '../../_chunks/dep-7211604f.mjs';
import '../../_chunks/dep-7ad89920.mjs';

function getCellKey(row, rowKey, colKey, colIndex) {
  var rowValue = get_1(row, rowKey);
  if (rowValue === void 0) {
    log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
  }
  return [rowValue, colKey || colIndex].join("_");
}
function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
  var skipSpansMap = ref( /* @__PURE__ */new Map());
  var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
    var rowIndex = params.rowIndex,
      colIndex = params.colIndex;
    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
    var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
    var maxColIndex = colIndex + (skipSpansValue.colspan || 1);
    for (var i = rowIndex; i < maxRowIndex; i++) {
      for (var j = colIndex; j < maxColIndex; j++) {
        if (i !== rowIndex || j !== colIndex) {
          if (!data.value[i] || !columns.value[j]) return;
          var cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);
          var state = skipSpansMap.value.get(cellKey) || {};
          state.skipped = true;
          skipSpansMap.value.set(cellKey, state);
        }
      }
    }
  };
  var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
    var _skipSpansMap$value;
    (_skipSpansMap$value = skipSpansMap.value) === null || _skipSpansMap$value === void 0 || _skipSpansMap$value.clear();
    if (!data2 || !rowspanAndColspan2) return;
    for (var i = 0, len = data2.length; i < len; i++) {
      var row = data2[i];
      for (var j = 0, colLen = columns2.length; j < colLen; j++) {
        var col = columns2[j];
        var params = {
          row: row,
          col: col,
          rowIndex: i,
          colIndex: j
        };
        var cellKey = getCellKey(row, rowKey.value, col.colKey, j);
        var state = skipSpansMap.value.get(cellKey) || {};
        var o = rowspanAndColspan2(params) || {};
        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
          o.rowspan && (state.rowspan = o.rowspan);
          o.colspan && (state.colspan = o.colspan);
          skipSpansMap.value.set(cellKey, state);
        }
        onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 || onTrRowspanOrColspan(params, state);
      }
    }
  };
  watch(function () {
    return [data.value, columns.value, rowspanAndColspan];
  }, function () {
    updateSkipSpansMap(data.value, columns.value, rowspanAndColspan === null || rowspanAndColspan === void 0 ? void 0 : rowspanAndColspan.value);
  }, {
    immediate: true
  });
  return {
    skipSpansMap: skipSpansMap
  };
}

export { useRowspanAndColspan as default, getCellKey };
//# sourceMappingURL=useRowspanAndColspan.mjs.map
