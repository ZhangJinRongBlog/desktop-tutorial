/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-b333ab93.mjs';
import { _ as _defineProperty } from '../_chunks/dep-a26b9c60.mjs';
import { isVNode, h, defineComponent, toRefs, ref, computed, reactive, watch, createVNode, mergeProps } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-97c71289.mjs';
import { u as upperFirst_1 } from '../_chunks/dep-0a6fd248.mjs';
import { i as isString_1 } from '../_chunks/dep-5f6c8826.mjs';
import { p as pick_1 } from '../_chunks/dep-d31cdc42.mjs';
import { g as get_1 } from '../_chunks/dep-87c358ba.mjs';
import { formatRowAttributes, formatRowClassNames, formatClassNames } from './utils.mjs';
import { getRowFixedStyles, getColumnFixedStyles } from './hooks/useFixed.mjs';
import useClassName from './hooks/useClassName.mjs';
import TEllipsis from './ellipsis.mjs';
import baseTableProps from './base-table-props.mjs';
import useLazyLoad from './hooks/useLazyLoad.mjs';
import { getCellKey } from './hooks/useRowspanAndColspan.mjs';
import '../_chunks/dep-6f3e4f56.mjs';
import '../_chunks/dep-b1060562.mjs';
import '../_chunks/dep-4efc69ee.mjs';
import '../_chunks/dep-7ad89920.mjs';
import '../_chunks/dep-0d1bd08c.mjs';
import '../_chunks/dep-c5d88cfe.mjs';
import '../_chunks/dep-36563716.mjs';
import '../_chunks/dep-8049d2e0.mjs';
import '../_chunks/dep-b1013215.mjs';
import '../_chunks/dep-91fc304f.mjs';
import '../_chunks/dep-17446155.mjs';
import '../_chunks/dep-6e04bcaa.mjs';
import '../_chunks/dep-28ae3cda.mjs';
import '../_chunks/dep-e50fa7b0.mjs';
import '../_chunks/dep-ae08d6c4.mjs';
import '../_chunks/dep-7211604f.mjs';
import '../_chunks/dep-31e6cb80.mjs';
import '../_chunks/dep-75df64b1.mjs';
import '../_chunks/dep-48b9a098.mjs';
import '../_chunks/dep-52c1d6a9.mjs';
import '../_chunks/dep-c7e4942d.mjs';
import '../_chunks/dep-372265bb.mjs';
import '../_chunks/dep-4b3e18ca.mjs';
import '../_chunks/dep-6043e9fc.mjs';
import '../_chunks/dep-b6b4eaa3.mjs';
import '../_chunks/dep-89b33ff6.mjs';
import '../_chunks/dep-6bcce672.mjs';
import '../_chunks/dep-9239b808.mjs';
import '../_chunks/dep-8bda6dda.mjs';
import '../_chunks/dep-53dc0ac1.mjs';
import '../_chunks/dep-4826cf61.mjs';
import '../_chunks/dep-8a9a248b.mjs';
import '../_chunks/dep-d940e2da.mjs';
import '../_chunks/dep-c57d8117.mjs';
import '../_chunks/dep-89a3e1c4.mjs';
import '../_chunks/dep-d23f3733.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-f7837681.mjs';
import '../_chunks/dep-9c7a32ff.mjs';
import '../_chunks/dep-c45cdd10.mjs';
import '../_chunks/dep-ce88e3c0.mjs';
import '../_chunks/dep-a432d90f.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-493c38ce.mjs';
import '../_chunks/dep-b56b2dc0.mjs';
import '../_chunks/dep-77f634fb.mjs';
import '../_chunks/dep-25d66c95.mjs';
import '../_chunks/dep-18bb982b.mjs';
import '../_chunks/dep-3a045465.mjs';
import '../_chunks/dep-881cffb7.mjs';
import '../_chunks/dep-436b338d.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-2d31a683.mjs';
import '../_chunks/dep-3ddc95d0.mjs';
import '../config-provider/type.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-ec227f3f.mjs';
import '../_chunks/dep-8747fcf0.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-7cc8d2c3.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/tnode.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import '../_common/js/utils/observe.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
function renderCell(params, slots, extra) {
  var col = params.col,
    row = params.row,
    rowIndex = params.rowIndex;
  if (col.colKey === "serial-number") {
    var _ref = (extra === null || extra === void 0 ? void 0 : extra.pagination) || {},
      current = _ref.current,
      pageSize = _ref.pageSize,
      defaultCurrent = _ref.defaultCurrent,
      defaultPageSize = _ref.defaultPageSize;
    var tCurrent = current || defaultCurrent;
    var tPageSize = pageSize || defaultPageSize;
    if (tPageSize && tCurrent) {
      return tPageSize * (tCurrent - 1) + rowIndex + 1;
    }
    return rowIndex + 1;
  }
  if (isFunction_1(col.cell)) {
    return col.cell(h, params);
  }
  if (slots[col.colKey]) {
    return slots[col.colKey](params);
  }
  if (isString_1(col.cell) && slots[col.cell]) {
    return slots[col.cell](params);
  }
  if (isFunction_1(col.render)) {
    return col.render(h, _objectSpread(_objectSpread({}, params), {}, {
      type: "cell"
    }));
  }
  var r = get_1(row, col.colKey);
  if (![void 0, "", null].includes(r)) return r;
  if (extra !== null && extra !== void 0 && extra.cellEmptyContent) {
    return isFunction_1(extra.cellEmptyContent) ? extra.cellEmptyContent(h, params) : extra.cellEmptyContent;
  }
  if (slots.cellEmptyContent) return slots.cellEmptyContent(params);
  if (slots["cell-empty-content"]) return slots["cell-empty-content"](params);
  return r;
}
var TrElement = defineComponent({
  name: "TR",
  props: _objectSpread(_objectSpread({
    row: Object,
    rowIndex: Number,
    dataLength: Number,
    ellipsisOverlayClassName: String,
    classPrefix: String,
    rowAndColFixedPosition: Map,
    skipSpansMap: Map,
    virtualConfig: Object,
    active: Boolean,
    isHover: Boolean
  }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
    tableElm: {},
    tableContentElm: {}
  }),
  emits: ["row-mounted"],
  setup: function setup(props, context) {
    var _toRefs = toRefs(props),
      tableContentElm = _toRefs.tableContentElm,
      active = _toRefs.active,
      isHover = _toRefs.isHover;
    var trRef = ref(null);
    var _useClassName = useClassName(),
      tdEllipsisClass = _useClassName.tdEllipsisClass,
      tableBaseClass = _useClassName.tableBaseClass,
      tableColFixedClasses = _useClassName.tableColFixedClasses,
      tableRowFixedClasses = _useClassName.tableRowFixedClasses,
      tdAlignClasses = _useClassName.tdAlignClasses,
      tableDraggableClasses = _useClassName.tableDraggableClasses;
    var trStyles = computed(function () {
      return getRowFixedStyles(get_1(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses);
    });
    var trAttributes = computed(function () {
      return formatRowAttributes(props.rowAttributes, {
        row: props.row,
        rowIndex: props.rowIndex,
        type: "body"
      }) || {};
    });
    var classes = computed(function () {
      var _trStyles$value;
      var customClasses = formatRowClassNames(props.rowClassName, {
        row: props.row,
        rowIndex: props.rowIndex,
        type: "body"
      }, props.rowKey || "id");
      return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses, _defineProperty(_defineProperty({}, "".concat(props.classPrefix, "-table__row--active"), active.value), "".concat(props.classPrefix, "-table__row--hover"), isHover.value)].filter(function (v) {
        return v;
      });
    });
    var _useLazyLoad = useLazyLoad(tableContentElm, trRef, reactive(_objectSpread(_objectSpread({}, props.scroll), {}, {
        rowIndex: props.rowIndex
      }))),
      hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
      tRowHeight = _useLazyLoad.tRowHeight;
    var getTrListeners = function getTrListeners(row, rowIndex) {
      var trListeners = {};
      ROW_LISTENERS.forEach(function (eventName) {
        trListeners["on".concat(upperFirst_1(eventName))] = function (e) {
          var _props;
          var p = {
            e: e,
            row: row,
            index: rowIndex
          };
          (_props = props["onRow".concat(upperFirst_1(eventName))]) === null || _props === void 0 || _props.call(props, p);
        };
      });
      return trListeners;
    };
    watch([trRef], function () {
      var _props$virtualConfig;
      if ((_props$virtualConfig = props.virtualConfig) !== null && _props$virtualConfig !== void 0 && _props$virtualConfig.isVirtualScroll.value) {
        context.emit("row-mounted", {
          ref: trRef,
          data: props.row
        });
      }
    });
    function renderEllipsisCell(cellParams, params) {
      var cellNode = params.cellNode;
      var col = cellParams.col,
        colIndex = cellParams.colIndex;
      var content;
      if (isFunction_1(col.ellipsis)) {
        content = col.ellipsis(h, cellParams);
      } else if (_typeof(col.ellipsis) === "object" && isFunction_1(col.ellipsis.content)) {
        content = col.ellipsis.content(h, cellParams);
      } else if (context.slots["ellipsis-".concat(col.colKey)]) {
        content = context.slots["ellipsis-".concat(col.colKey)](cellParams);
      } else if (context.slots.ellipsis) {
        content = context.slots.ellipsis(cellParams);
      }
      var tooltipProps = {};
      if (_typeof(col.ellipsis) === "object") {
        tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
      }
      var tableElement = props.tableElm;
      var placement = colIndex === 0 ? "top-left" : "top";
      placement = colIndex === props.columns.length - 1 ? "top-right" : placement;
      return createVNode(TEllipsis, {
        "placement": placement,
        "attach": tableElement ? function () {
          return tableElement;
        } : void 0,
        "tooltipContent": content && function () {
          return content;
        },
        "tooltipProps": tooltipProps,
        "overlayClassName": props.ellipsisOverlayClassName,
        "classPrefix": props.classPrefix
      }, _isSlot(cellNode) ? cellNode : {
        "default": function _default() {
          return [cellNode];
        }
      });
    }
    function renderTd(params, extra) {
      var col = params.col,
        colIndex = params.colIndex,
        rowIndex = params.rowIndex;
      var cellSpans = extra.cellSpans,
        dataLength = extra.dataLength,
        rowAndColFixedPosition = extra.rowAndColFixedPosition;
      var cellNode = renderCell(params, context.slots, {
        cellEmptyContent: extra.cellEmptyContent,
        pagination: props.pagination
      });
      var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, tableColFixedClasses);
      var customClasses = formatClassNames(col.className, _objectSpread(_objectSpread({}, params), {}, {
        type: "td"
      }));
      var classes2 = [tdStyles.classes, customClasses, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, tdEllipsisClass, col.ellipsis), tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), tableBaseClass.tdFirstCol, colIndex === 0 && props.rowspanAndColspan), tdAlignClasses[col.align], col.align && col.align !== "left"), tableDraggableClasses.handle, col.colKey === "drag")];
      var onClick = function onClick(e) {
        var _props$onCellClick;
        var p = _objectSpread(_objectSpread({}, params), {}, {
          e: e
        });
        if (col.stopPropagation) {
          e.stopPropagation();
        }
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, p);
      };
      var normalAttrs = isFunction_1(col.attrs) ? col.attrs(_objectSpread(_objectSpread({}, params), {}, {
        type: "td"
      })) : col.attrs;
      var attrs = _objectSpread(_objectSpread({}, normalAttrs), cellSpans);
      return createVNode("td", mergeProps({
        "key": col.colKey || colIndex,
        "class": classes2,
        "style": tdStyles.style
      }, attrs, {
        "onClick": onClick
      }), [col.ellipsis ? renderEllipsisCell(params, {
        cellNode: cellNode
      }) : cellNode]);
    }
    return function () {
      var _trStyles$value2;
      var columns = props.columns,
        skipSpansMap = props.skipSpansMap,
        row = props.row,
        dataLength = props.dataLength,
        rowAndColFixedPosition = props.rowAndColFixedPosition;
      var columVNodeList = columns === null || columns === void 0 ? void 0 : columns.map(function (col, colIndex) {
        var cellSpans = {};
        var params = {
          row: row,
          col: col,
          rowIndex: props.rowIndex,
          colIndex: colIndex
        };
        var spanState = null;
        if (props.skipSpansMap.size) {
          var _spanState, _spanState2;
          var cellKey = getCellKey(row, props.rowKey, col.colKey, colIndex);
          spanState = skipSpansMap.get(cellKey) || {};
          ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
          ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
          if (spanState.skipped) return null;
        }
        return renderTd(params, {
          dataLength: dataLength,
          rowAndColFixedPosition: rowAndColFixedPosition,
          columnLength: columns.length,
          cellSpans: cellSpans,
          cellEmptyContent: props.cellEmptyContent
        });
      });
      return createVNode("tr", mergeProps({
        "ref": trRef
      }, trAttributes.value, {
        "style": (_trStyles$value2 = trStyles.value) === null || _trStyles$value2 === void 0 ? void 0 : _trStyles$value2.style,
        "class": classes.value
      }, getTrListeners(row, props.rowIndex)), [hasLazyLoadHolder.value ? [createVNode("td", {
        "style": {
          height: "".concat(tRowHeight.value, "px"),
          border: "none"
        }
      }, null)] : columVNodeList]);
    };
  }
});

export { ROW_LISTENERS, TABLE_PROPS, TrElement as default, renderCell };
//# sourceMappingURL=tr.mjs.map
