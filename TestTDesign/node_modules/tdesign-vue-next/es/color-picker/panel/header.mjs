/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-a26b9c60.mjs';
import { isVNode, defineComponent, ref, watch, createVNode } from 'vue';
import props from '../props.mjs';
import '../const.mjs';
import { RadioGroup, RadioButton } from '../../radio/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import { COLOR_MODES } from '../../_common/js/color-picker/constants.mjs';
import '../../_chunks/dep-b333ab93.mjs';
import '../../radio/radio.mjs';
import '../../_chunks/dep-f7837681.mjs';
import '../../_chunks/dep-6bcce672.mjs';
import '../../_chunks/dep-89b33ff6.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-97c71289.mjs';
import '../../_chunks/dep-6f3e4f56.mjs';
import '../../_chunks/dep-b1060562.mjs';
import '../../_chunks/dep-4efc69ee.mjs';
import '../../_chunks/dep-493c38ce.mjs';
import '../../_chunks/dep-b56b2dc0.mjs';
import '../../_chunks/dep-77f634fb.mjs';
import '../../_chunks/dep-28ae3cda.mjs';
import '../../_chunks/dep-e50fa7b0.mjs';
import '../../_chunks/dep-ae08d6c4.mjs';
import '../../_chunks/dep-7211604f.mjs';
import '../../_chunks/dep-75df64b1.mjs';
import '../../_chunks/dep-48b9a098.mjs';
import '../../_chunks/dep-c7e4942d.mjs';
import '../../_chunks/dep-8049d2e0.mjs';
import '../../_chunks/dep-0d1bd08c.mjs';
import '../../_chunks/dep-c5d88cfe.mjs';
import '../../_chunks/dep-25d66c95.mjs';
import '../../_chunks/dep-372265bb.mjs';
import '../../_chunks/dep-d940e2da.mjs';
import '../../_chunks/dep-52c1d6a9.mjs';
import '../../_chunks/dep-18bb982b.mjs';
import '../../_chunks/dep-c57d8117.mjs';
import '../../_chunks/dep-6043e9fc.mjs';
import '../../_chunks/dep-5f6c8826.mjs';
import '../../_chunks/dep-3a045465.mjs';
import '../../_chunks/dep-53dc0ac1.mjs';
import '../../_chunks/dep-b6b4eaa3.mjs';
import '../../_chunks/dep-881cffb7.mjs';
import '../../_chunks/dep-436b338d.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-2d31a683.mjs';
import '../../_chunks/dep-3ddc95d0.mjs';
import '../../config-provider/type.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-9c7a32ff.mjs';
import '../../_chunks/dep-0a6fd248.mjs';
import '../../_chunks/dep-7ad89920.mjs';
import '../../_chunks/dep-36563716.mjs';
import '../../_chunks/dep-b1013215.mjs';
import '../../_chunks/dep-91fc304f.mjs';
import '../../_chunks/dep-17446155.mjs';
import '../../_chunks/dep-ce88e3c0.mjs';
import '../../_chunks/dep-c45cdd10.mjs';
import '../../_chunks/dep-a432d90f.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-8747fcf0.mjs';
import '../../hooks/tnode.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-ec227f3f.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-fc0ecd7a.mjs';
import '../../_chunks/dep-2311acd8.mjs';
import '../../_chunks/dep-99b45a9d.mjs';
import '../../_chunks/dep-9239b808.mjs';
import '../../_chunks/dep-8bda6dda.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/useKeyboard.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../_common/js/common.mjs';
import '../../watermark/hooks.mjs';
import '../../hooks/useResizeObserver.mjs';
import '../../radio/radio-button.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../radio/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var PanelHeader = defineComponent({
  name: "PanelHeader",
  props: _objectSpread(_objectSpread({}, props), {}, {
    mode: {
      type: String,
      "default": "color"
    },
    togglePopup: {
      type: Function
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();
    var modeValue = ref(props2.mode);
    var handleModeChange = function handleModeChange(v) {
      return props2.onModeChange(v);
    };
    watch(function () {
      return props2.mode;
    }, function (v) {
      return modeValue.value = v;
    });
    return {
      baseClassName: baseClassName,
      modeValue: modeValue,
      handleModeChange: handleModeChange
    };
  },
  render: function render() {
    var _slot;
    var _this$colorModes,
      _this$colorModes2,
      _this = this;
    if (((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1) {
      return null;
    }
    var baseClassName = this.baseClassName;
    return createVNode("div", {
      "class": "".concat(baseClassName, "__head")
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__mode")
    }, [((_this$colorModes2 = this.colorModes) === null || _this$colorModes2 === void 0 ? void 0 : _this$colorModes2.length) === 1 ? COLOR_MODES[this.colorModes[0]] : createVNode(RadioGroup, {
      "variant": "default-filled",
      "size": "small",
      "modelValue": _this.modeValue,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.modeValue = $event;
      },
      "onChange": this.handleModeChange
    }, _isSlot(_slot = Object.keys(COLOR_MODES).map(function (key) {
      return createVNode(RadioButton, {
        "key": key,
        "value": key
      }, {
        "default": function _default() {
          return [COLOR_MODES[key]];
        }
      });
    })) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    })])]);
  }
});

export { PanelHeader as default };
//# sourceMappingURL=header.mjs.map
