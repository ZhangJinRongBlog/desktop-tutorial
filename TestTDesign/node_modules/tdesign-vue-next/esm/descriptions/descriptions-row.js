/**
 * tdesign v1.8.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, inject, createVNode, mergeProps, Fragment } from 'vue';
import { LayoutEnum } from '../common.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { descriptionsKey } from './const/index.js';
import { itemTypeIsProps, renderVNodeTNode } from './utils/index.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-26f09cd4.js';
import 'dayjs';
import '../_chunks/dep-5710a47d.js';
import 'lodash/isArray';
import '../config-provider/type.js';
import './interface.js';

var DescriptionsRow = defineComponent({
  name: "TDescriptionsRow",
  props: {
    row: Array,
    itemType: String
  },
  setup: function setup(props) {
    var descriptionsProps = inject(descriptionsKey);
    var COMPONENT_NAME = usePrefixClass("descriptions");
    var label = function label(node) {
      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LayoutEnum.HORIZONTAL;
      var labelClass = ["".concat(COMPONENT_NAME.value, "__label")];
      var label2 = null;
      var span = null;
      if (itemTypeIsProps(props.itemType, node)) {
        label2 = node.label;
        span = node.span;
      } else {
        label2 = renderVNodeTNode(node, "label");
        span = node.props.span;
      }
      var labelSpan = layout === LayoutEnum.HORIZONTAL ? 1 : span;
      return createVNode("td", mergeProps({
        "colspan": labelSpan,
        "class": labelClass
      }, {
        style: descriptionsProps.labelStyle
      }), [label2, descriptionsProps.colon && ":"]);
    };
    var content = function content(node) {
      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LayoutEnum.HORIZONTAL;
      var contentClass = ["".concat(COMPONENT_NAME.value, "__content")];
      var content2 = null;
      var span = null;
      if (itemTypeIsProps(props.itemType, node)) {
        content2 = node.content;
        span = node.span;
      } else {
        content2 = renderVNodeTNode(node, "content", "default");
        span = node.props.span;
      }
      var contentSpan = span > 1 && layout === LayoutEnum.HORIZONTAL ? span * 2 - 1 : span;
      return createVNode("td", mergeProps({
        "colspan": contentSpan,
        "class": contentClass
      }, {
        style: descriptionsProps.contentStyle
      }), [content2]);
    };
    var hh = function hh() {
      return createVNode("tr", null, [props.row.map(function (node) {
        return createVNode(Fragment, null, [label(node), content(node)]);
      })]);
    };
    var hv = function hv() {
      return createVNode(Fragment, null, [createVNode("tr", null, [props.row.map(function (node) {
        return label(node, LayoutEnum.VERTICAL);
      })]), createVNode("tr", null, [props.row.map(function (node) {
        return content(node, LayoutEnum.VERTICAL);
      })])]);
    };
    var vh = function vh() {
      return createVNode(Fragment, null, [props.row.map(function (node) {
        return createVNode("tr", null, [label(node), content(node)]);
      })]);
    };
    var vv = function vv() {
      return createVNode(Fragment, null, [props.row.map(function (node) {
        return createVNode(Fragment, null, [createVNode("tr", null, [label(node)]), createVNode("tr", null, [content(node)])]);
      })]);
    };
    return function () {
      return createVNode(Fragment, null, [descriptionsProps.layout === LayoutEnum.HORIZONTAL ? descriptionsProps.itemLayout === LayoutEnum.HORIZONTAL ? hh() : hv() : descriptionsProps.itemLayout === LayoutEnum.HORIZONTAL ? vh() : vv()]);
    };
  }
});

export { DescriptionsRow as default };
//# sourceMappingURL=descriptions-row.js.map
