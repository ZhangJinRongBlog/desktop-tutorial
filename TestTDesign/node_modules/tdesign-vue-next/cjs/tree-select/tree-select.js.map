{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, ref, computed, watch, onMounted, toRefs } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\n\nimport Tree, { TreeProps, TreeNodeModel, TreeNodeValue } from '../tree';\nimport SelectInput, { TdSelectInputProps } from '../select-input';\nimport FakeArrow from '../common-components/fake-arrow';\nimport { PopupVisibleChangeContext } from '../popup';\n\nimport { INodeOptions } from './interface';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectValueChangeTrigger } from './type';\nimport { TreeOptionData } from '../common';\nimport props from './props';\n\n// hooks\nimport { usePrefixClass, useConfig } from '../hooks/useConfig';\nimport { useFormDisabled } from '../form/hooks';\nimport { useTNodeJSX, useTNodeDefault } from '../hooks/tnode';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'TTreeSelect',\n  props,\n  setup(props: TdTreeSelectProps, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderDefaultTNode = useTNodeDefault();\n    const classPrefix = usePrefixClass();\n    const { globalConfig } = useConfig('treeSelect');\n    const formDisabled = useFormDisabled();\n\n    // ref\n    const treeRef = ref(null);\n\n    // data\n    const filterByText = ref(null);\n    const actived = ref([]);\n    const expanded = ref([]);\n    const nodeInfo = ref(null);\n    const treeKey = ref(0);\n\n    // model\n    const { value, modelValue, popupVisible, inputValue } = toRefs(props);\n    const [treeSelectValue, setTreeSelectValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const [innerVisible, setInnerVisible] = useDefaultValue(\n      popupVisible,\n      false,\n      props.onPopupVisibleChange,\n      'popupVisible',\n    );\n    const [innerInputValue, setInnerInputValue] = useDefaultValue(\n      inputValue,\n      props.defaultInputValue,\n      props.onInputChange,\n      'inputValue',\n    );\n\n    // watch\n    watch(treeSelectValue, async () => {\n      await changeNodeInfo();\n      if (!props.multiple) {\n        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];\n      }\n    });\n    watch(\n      () => props.data,\n      async () => {\n        await changeNodeInfo();\n        treeRerender();\n      },\n      {\n        deep: true,\n      },\n    );\n\n    // computed\n    const tDisabled = computed(() => {\n      return formDisabled.value || props.disabled;\n    });\n\n    const inputPlaceholder = computed(\n      () => (innerVisible.value && nodeInfo.value?.label) || props.placeholder || globalConfig.value.placeholder,\n    );\n\n    const popupClass = computed(() => {\n      return [`${classPrefix.value}-select__dropdown`, 'narrow-scrollbar'];\n    });\n\n    const dropdownInnerSize = computed(() => {\n      return {\n        small: 's',\n        medium: 'm',\n        large: 'l',\n      }[props.size];\n    });\n\n    const isObjectValue = computed(() => props.valueType === 'object');\n\n    const checked = computed((): Array<TreeNodeValue> => {\n      if (props.multiple) {\n        if (isObjectValue.value) {\n          return isArray(treeSelectValue.value)\n            ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n            : [];\n        }\n        return isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => item as TreeNodeValue)\n          : [];\n      }\n      return [];\n    });\n\n    const multiLimitDisabled = computed(() => {\n      return (\n        props.multiple &&\n        !!props.max &&\n        isArray(treeSelectValue.value) &&\n        props.max <= (treeSelectValue.value as Array<TreeSelectValue>).length\n      );\n    });\n\n    const realLabel = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.label || 'label';\n      }\n      return props.keys?.label || 'label';\n    });\n\n    const realValue = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.value || 'value';\n      }\n      return props.keys?.value || 'value';\n    });\n\n    const realChildren = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.children || 'children';\n      }\n      return props.keys?.children || 'children';\n    });\n\n    // timelifes\n    onMounted(async () => {\n      if (!treeSelectValue.value && props.defaultValue) {\n        await change(props.defaultValue, null, 'uncheck');\n      }\n      if (isObjectValue.value) {\n        actived.value = isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n          : [(treeSelectValue.value as INodeOptions).value];\n      } else {\n        (actived.value as TreeSelectValue) = isArray(treeSelectValue.value)\n          ? treeSelectValue.value\n          : [treeSelectValue.value];\n      }\n      changeNodeInfo();\n    });\n\n    // methods\n\n    const change = (\n      valueParam: TreeSelectValue,\n      node: TreeNodeModel<TreeOptionData>,\n      trigger: TreeSelectValueChangeTrigger,\n    ) => {\n      setTreeSelectValue(valueParam, { node, trigger });\n      changeNodeInfo();\n    };\n\n    const clear = (content: { e: MouseEvent }) => {\n      const defaultValue: TreeSelectValue = props.multiple ? [] : '';\n      actived.value = [];\n      change(defaultValue, null, 'clear');\n      props.onClear?.({ e: content.e });\n    };\n\n    const treeNodeChange = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e?: MouseEvent },\n    ) => {\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        current = valueParam.map((nodeValue) => getTreeNode(props.data, nodeValue));\n      }\n      change(current, context.node, 'check');\n    };\n\n    const treeNodeActive = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e?: MouseEvent },\n    ) => {\n      if (!props.multiple) {\n        setInnerVisible(false, context);\n      }\n      // 多选模式屏蔽 Active 事件\n      if (props.multiple) {\n        return;\n      }\n      // 单选模式重复选择不清空\n      if (treeSelectValue.value === context.node.data[realValue.value]) {\n        return;\n      }\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        const nodeValue = isEmpty(valueParam) ? '' : valueParam[0];\n        current = getTreeNode(props.data, nodeValue);\n      } else {\n        current = isEmpty(valueParam) ? '' : valueParam[0];\n      }\n      change(current, context.node, 'check');\n      actived.value = valueParam;\n    };\n\n    const treeNodeExpand = (valueParam: Array<TreeNodeValue>) => {\n      expanded.value = valueParam;\n    };\n\n    const treeNodeLoad = () => {\n      changeNodeInfo();\n    };\n\n    const inputChange = (value: string): boolean => {\n      // 未打开状态不处理输入框输入\n      if (!innerVisible.value) {\n        props.onSearch?.(String(value));\n        return;\n      }\n      setInnerInputValue(value);\n      if (!value) {\n        filterByText.value = null;\n        return null;\n      }\n      filterByText.value = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(props.filter)) {\n          const filter: boolean | Promise<boolean> = props.filter(String(value), node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[realLabel.value].indexOf(value) >= 0;\n      };\n      props.onSearch?.(String(value));\n    };\n\n    const tagChange: TdSelectInputProps['onTagChange'] = (value, context) => {\n      const { trigger, index } = context;\n      if (['tag-remove', 'backspace'].includes(trigger)) {\n        isArray(treeSelectValue.value) && (treeSelectValue.value as Array<TreeSelectValue>).splice(index, 1);\n      }\n      props.onRemove?.({ value, data: null, e: context && (context.e as MouseEvent) });\n      change(treeSelectValue.value, null, trigger as 'tag-remove' | 'backspace');\n    };\n\n    const handlePopupVisibleChange = (visible: boolean, context: PopupVisibleChangeContext) => {\n      setInnerVisible(visible, context);\n      // 在通过点击选择器打开弹窗时 清空此前的输入内容 避免在关闭时就清空引起的闪烁问题\n      if (visible && context.trigger === 'trigger-element-click') setInnerInputValue('');\n    };\n    const changeNodeInfo = async () => {\n      await treeSelectValue.value;\n\n      if (!props.multiple) {\n        if (treeSelectValue.value || treeSelectValue.value === 0) {\n          nodeInfo.value = getSingleNodeInfo();\n        } else {\n          nodeInfo.value = '';\n        }\n      } else if (props.multiple) {\n        if (isArray(treeSelectValue.value)) {\n          nodeInfo.value = getMultipleNodeInfo();\n        } else {\n          nodeInfo.value = [];\n        }\n      } else {\n        nodeInfo.value = null;\n      }\n    };\n\n    const getSingleNodeInfo = () => {\n      const nodeValue = isObjectValue.value ? (treeSelectValue.value as INodeOptions).value : treeSelectValue.value;\n      if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n        if (!isEmpty(props.data)) {\n          const node = treeRef.value.getItem(nodeValue);\n          if (node) {\n            return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n          }\n        }\n        return { label: nodeValue, value: nodeValue };\n      }\n      const node = getTreeNode(props.data, nodeValue);\n      if (!node) {\n        return { label: nodeValue, value: nodeValue };\n      }\n      return node;\n    };\n\n    const getMultipleNodeInfo = () => {\n      return (treeSelectValue.value as Array<TreeSelectValue>).map((value) => {\n        const nodeValue = isObjectValue.value ? (value as INodeOptions).value : value;\n        if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n          if (!isEmpty(props.data)) {\n            const node = treeRef.value.getItem(nodeValue);\n            if (node) {\n              return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n            }\n          }\n          return { label: nodeValue, value: nodeValue };\n        }\n        const node = getTreeNode(props.data, nodeValue);\n        if (!node) {\n          return { label: nodeValue, value: nodeValue };\n        }\n        return node;\n      });\n    };\n    const getTreeNode = (data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectValue | null => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        if (data[i][realValue.value] === targetValue) {\n          return { label: data[i][realLabel.value], value: data[i][realValue.value] };\n        }\n        if (data[i]?.[realChildren.value]) {\n          const result = getTreeNode(data[i]?.[realChildren.value], targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    };\n\n    const treeRerender = () => {\n      treeKey.value += 1;\n    };\n\n    const renderTree = () => (\n      <Tree\n        ref={treeRef}\n        v-show={!props.loading}\n        key={treeKey.value}\n        value={[...checked.value]}\n        hover\n        keys={props.keys}\n        data={props.data}\n        activable={!props.multiple}\n        checkable={props.multiple}\n        disabled={tDisabled.value || multiLimitDisabled.value}\n        size={props.size}\n        filter={filterByText.value}\n        icon={!filterByText.value}\n        actived={actived.value}\n        expanded={expanded.value}\n        activeMultiple={props.multiple}\n        onChange={treeNodeChange}\n        onActive={treeNodeActive}\n        onExpand={treeNodeExpand}\n        onLoad={treeNodeLoad}\n        expandOnClickNode\n        v-slots={{\n          empty: () =>\n            renderDefaultTNode('empty', {\n              defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.empty}</div>,\n            }),\n        }}\n        {...(props.treeProps as TdTreeSelectProps['treeProps'])}\n      />\n    );\n\n    const renderSuffixIcon = () => (\n      <FakeArrow\n        isActive={innerVisible.value}\n        disabled={props.disabled}\n        overlayClassName={{\n          [`${classPrefix.value}-fake-arrow--highlight`]: innerVisible.value,\n          [`${classPrefix.value}-fake-arrow--disable`]: props.disabled,\n        }}\n      />\n    );\n\n    return () => (\n      <SelectInput\n        class={`${classPrefix.value}-tree-select`}\n        value={nodeInfo.value}\n        inputValue={innerVisible.value ? innerInputValue.value : ''}\n        popupVisible={innerVisible.value}\n        disabled={tDisabled.value}\n        multiple={props.multiple}\n        loading={props.loading}\n        clearable={props.clearable}\n        autoWidth={props.autoWidth}\n        borderless={props.borderless}\n        readonly={props.readonly}\n        placeholder={inputPlaceholder.value}\n        allowInput={props.filterable || isFunction(props.filter)}\n        minCollapsedNum={props.minCollapsedNum}\n        collapsed-items={props.collapsedItems}\n        popupProps={{\n          overlayClassName: popupClass.value,\n          ...(props.popupProps as TdTreeSelectProps['popupProps']),\n        }}\n        inputProps={{\n          size: props.size,\n          ...(props.inputProps as TdTreeSelectProps['inputProps']),\n        }}\n        tagInputProps={{\n          size: props.size,\n        }}\n        tagProps={{\n          maxWidth: 300,\n          ...(props.tagProps as TdTreeSelectProps['tagProps']),\n        }}\n        label={() => renderTNodeJSX('prefixIcon')}\n        suffix={props.suffix}\n        suffixIcon={() => {\n          if (props.suffixIcon || slots.suffixIcon) {\n            return renderTNodeJSX('suffixIcon');\n          }\n\n          return renderSuffixIcon();\n        }}\n        onClear={clear}\n        onBlur={(_: any, context) => {\n          props.onBlur?.({ value: treeSelectValue.value, e: context.e as FocusEvent });\n        }}\n        onFocus={(_: any, context: { e: FocusEvent }) => {\n          props.onFocus?.({ value: treeSelectValue.value, e: context.e });\n        }}\n        valueDisplay={() =>\n          renderTNodeJSX('valueDisplay', {\n            params: props.multiple\n              ? {\n                  value: nodeInfo.value,\n                  onClose: (index: number) => {\n                    const value = nodeInfo.value.map((node: TreeOptionData) => node.value);\n                    tagChange(value, {\n                      trigger: 'tag-remove',\n                      index,\n                      item: value[index],\n                    });\n                  },\n                }\n              : {\n                  value: nodeInfo.value || { [realLabel.value]: '', [realValue.value]: undefined },\n                },\n          })\n        }\n        v-slots={{\n          suffix: slots.suffix,\n          panel: () => (\n            <div\n              class={[\n                `${classPrefix.value}-select__dropdown-inner`,\n                `${classPrefix.value}-select__dropdown-inner--size-${dropdownInnerSize.value}`,\n              ]}\n            >\n              {renderTNodeJSX('panelTopContent')}\n              <p\n                v-show={props.loading && !tDisabled.value}\n                class={[`${classPrefix.value}-select-loading-tips`, `${classPrefix.value}-select__right-icon-polyfill`]}\n              >\n                {renderDefaultTNode('loadingText', {\n                  defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.loadingText}</div>,\n                })}\n              </p>\n              {renderTree()}\n              {renderTNodeJSX('panelBottomContent')}\n            </div>\n          ),\n          collapsedItems: slots.collapsedItems,\n        }}\n        onInputChange={inputChange}\n        onTagChange={tagChange}\n        onPopupVisibleChange={handlePopupVisibleChange}\n        {...(props.selectInputProps as TdTreeSelectProps['selectInputProps'])}\n      />\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","_ref","renderTNodeJSX","useTNodeJSX","renderDefaultTNode","useTNodeDefault","classPrefix","usePrefixClass","_useConfig","useConfig","globalConfig","formDisabled","useFormDisabled","treeRef","ref","filterByText","actived","expanded","nodeInfo","treeKey","_toRefs","toRefs","value","modelValue","popupVisible","inputValue","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","treeSelectValue","setTreeSelectValue","_useDefaultValue","useDefaultValue","onPopupVisibleChange","_useDefaultValue2","innerVisible","setInnerVisible","_useDefaultValue3","defaultInputValue","onInputChange","_useDefaultValue4","innerInputValue","setInnerInputValue","watch","_callee","_regeneratorRuntime","wrap","_callee$","_context","prev","next","changeNodeInfo","multiple","stop","data","_asyncToGenerator","mark","_callee2","_callee2$","_context2","treeRerender","deep","tDisabled","computed","disabled","inputPlaceholder","_nodeInfo$value","label","placeholder","popupClass","concat","dropdownInnerSize","small","medium","large","size","isObjectValue","valueType","checked","isArray","map","item","multiLimitDisabled","max","length","realLabel","_props2$keys","isEmpty","treeProps","keys","realValue","_props2$keys2","realChildren","_props2$keys3","children","onMounted","_callee3","_callee3$","_context3","change","valueParam","node","trigger","clear","content","_props2$onClear","onClear","e","treeNodeChange","context","current","nodeValue","getTreeNode","treeNodeActive","treeNodeExpand","treeNodeLoad","inputChange","_props2$onSearch2","_props2$onSearch","onSearch","String","isFunction","filter","isBoolean","indexOf","tagChange","_props2$onRemove","index","includes","splice","onRemove","handlePopupVisibleChange","visible","_callee4","_callee4$","_context4","getSingleNodeInfo","getMultipleNodeInfo","_props2$treeProps","load","getItem","_props2$treeProps2","targetValue","i","len","_data$i","_data$i2","result","isNil","renderTree","_withDirectives","_createVNode","Tree","_mergeProps","empty","defaultNode","_vShow","loading","renderSuffixIcon","FakeArrow","_defineProperty","SelectInput","clearable","autoWidth","borderless","readonly","filterable","minCollapsedNum","collapsedItems","_objectSpread","overlayClassName","popupProps","inputProps","maxWidth","tagProps","suffix","suffixIcon","onBlur","_","_props2$onBlur","onFocus","_props2$onFocus","valueDisplay","params","onClose","selectInputProps","panel","loadingText"],"mappings":"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"}